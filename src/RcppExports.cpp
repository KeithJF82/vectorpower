// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_cohort
Rcpp::List rcpp_cohort(List params, List trial_params, List cluster_data);
RcppExport SEXP _vectorpower_rcpp_cohort(SEXP paramsSEXP, SEXP trial_paramsSEXP, SEXP cluster_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< List >::type trial_params(trial_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type cluster_data(cluster_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_cohort(params, trial_params, cluster_data));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mainpop
Rcpp::List rcpp_mainpop(List params, List inputs, List trial_params);
RcppExport SEXP _vectorpower_rcpp_mainpop(SEXP paramsSEXP, SEXP inputsSEXP, SEXP trial_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< List >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< List >::type trial_params(trial_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mainpop(params, inputs, trial_params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vectorpower_rcpp_cohort", (DL_FUNC) &_vectorpower_rcpp_cohort, 3},
    {"_vectorpower_rcpp_mainpop", (DL_FUNC) &_vectorpower_rcpp_mainpop, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_vectorpower(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
